#!/usr/bin/python3 -I

'''Display information about reservations

This command displays information about PBS reservations. It is similar
to pbs_rstat, but accepts field selections similarly to nas_qstat.
'''

# Because this program might be run as root, or with
# a random environment, check for some conditions that
# might cause security issues.


def check_perms():
    import sys
    import os
    import stat
    user = os.getuid()
    # First, clean up python search path by removing
    # dodgy entries.
    newp = []
    for x in sys.path:
        if x == '':
            continue
        try:
            sb = os.stat(x)
        except OSError:
            continue
        # Skip items not owned by root, unless
        # running as the owner of the item.
        if sb.st_uid != 0 and user != sb.st_uid:
            continue
        # Skip non-directories in path
        if not stat.S_ISDIR(sb.st_mode):
            continue
        # Skip things that others can modify
        mode = stat.S_IMODE(sb.st_mode)
        if (mode & (stat.S_IWGRP | stat.S_IWOTH)):
            continue
        if x not in newp:
            newp.append(x)
    # Update sys.path to what is left
    sys.path.clear()
    sys.path.extend(newp)

    # Now, check that we haven't already loaded
    # suspect items.
    for name, val in sys.modules.items():
        src = str(val)
        pcs = src.split()
        pathpart = pcs[-1]
        path = pathpart[1:-2]
        if path in ['built-in', 'frozen']:
            continue
        if name == '__main__':
            # For debugging, we might need to
            # add the directory where the script
            # resides back to sys.path, if
            # the -I flag removed it.
            # First, though, deal with invoked through symlink.
            t = os.path.dirname(path)
            sb = os.lstat(path)
            if stat.S_ISLNK(sb.st_mode):
                r = os.readlink(path)
                t = os.path.join(t, r)
                t = os.path.dirname(t)
            t = os.path.abspath(t)
            if t not in sys.path:
                sys.path.insert(0, t)
            # If path ends in bin, try to add equivalent lib directory
            (head, tail) = os.path.split(t)
            if tail != 'bin':
                continue
            t = os.path.join(head, 'lib')
            if t in sys.path:
                # Already there
                continue
            if not os.path.exists(t):
                continue
            # Repeat some security checks
            try:
                sb = os.lstat(t)
            except OSError:
                continue
            if not stat.S_ISDIR(sb.st_mode):
                continue
            mode = stat.S_IMODE(sb.st_mode)
            if (mode & (stat.S_IWGRP | stat.S_IWOTH)):
                continue
            # Add lib to path
            sys.path.insert(1, t)
            continue
        if "' from '" in src:
            # Reject things that others can modify
            sb = os.stat(path)
            if sb.st_uid != 0 and user != sb.st_uid:
                raise OSError("Unsafe PYTHONPATH with " + path)
            mode = stat.S_IMODE(sb.st_mode)
            if (mode & (stat.S_IWGRP | stat.S_IWOTH)):
                raise OSError("Unsafe PYTHONPATH with " + path)
    return True


if check_perms():
    # These imports are indented this way just to avoid gripes from
    # PEP-8 checkers.
    import sys
    import os
    import argparse
    import re
    import signal
    import socket
    import stat
    import subprocess
    import time

    import nas_xstat_config as conf
    import pbs_ifl as ifl
    from nas_pbsutil import *
    import nas_layout as layout
    import nas_field_format
    from nas_field_format import NAS_field_format, gen_field, define_on_the_fly

long_desc = __doc__
gdebug = []
conf.pbs_conf = pbs_conf = ifl.cvar.pbs_conf
version = "0.2.3"


def main():
    global version, gdebug
    # Don't catch any signals (so no ugly tracebacks on Ctrl-C).
    for i in range(1, signal.NSIG):
        try:
            signal.signal(i, signal.SIG_DFL)
        except OSError:
            pass
    prog = sys.argv[0].split('/')[-1]
    parser = argparse.ArgumentParser(
        description=long_desc, prog=prog,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('-B', default=False, action='store_true',
                        help='brief output: just reservation IDs')
    parser.add_argument('-F', default=False, action='store_true',
                        help='request full details')
    parser.add_argument('-f', default=False, action='store_true',
                        help='output one line per attribute')
    parser.add_argument('-S', default=False, action='store_true',
                        help='request short output (default)')
    parser.add_argument('--debug', default=[], action='append',
                        help='Debugging arguments (for developers)')
    parser.add_argument('--verbose', '-v', default=0, action='count',
                        help='increase debugging verbosity')
    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + version)
    parser.add_argument('-W', action='append', metavar='display_option',
                        help='options affecting field selection and display.'
                        ' See nas_qstat.1')
    parser.add_argument('resvids', nargs=argparse.REMAINDER,
                        help='reservations to list')

    args = conf.args = parser.parse_args()
    conf.verbose = verbose = args.verbose
    conf.gdebug = gdebug = ' '.join(args.debug)

    if (ifl.pbs_loadconf(0) == 0):
        print("Cannot get PBS configuration information", file=sys.stderr)
        return 1

    default_fields = ['name', 'queue', 'user', 'states', 'start', 'duration',
                      'end']
    conf.verbose = args.verbose
    levels = 0
    if args.B:
        levels += 1
    if args.F:
        levels += 1
    if args.f:
        levels += 1
    if args.S:
        levels += 1
    if (levels > 1):
        print("Use only one of B, F, S, f", file=sys.stderr)
        return 1
    # Build list of known fields
    opts_W = args.W
    if opts_W is None:
        opts_W = list()
    if args.B:
        default_fields = ['name']
    conf.opts_W = opts_W
    if (ifl.pbs_loadconf(0) == 0):
        print("Cannot get PBS configuration information", file=sys.stderr)
        return 1
    # Load possible user or system overrides
    more_code = load_userexits('rstat')
    if more_code:
        prog = compile(more_code, 'userexit code', 'exec')
        exec(prog, globals(), locals())
    default_W = []
    userexit_post_opts(globals(), locals())
    opts_W[0:0] = default_W
    known_fields = gen_field_list()
    # Scan opts_W for on-the-fly field defs
    define_on_the_fly(known_fields, opts_W)
    fmtr = NAS_field_format(default_fields)
    fmtr.known_fields = known_fields
    userexit_add_fields(globals(), locals())
    # Handle -W options
    (field_list, attr_list, errs) = fmtr.collect_fields()
    if (errs):
        # Check if should just print list of fields
        if field_list is None:
            print('\n'.join(errs))
            return 0
        print(errs, file=sys.stderr)
    rc = fmtr.adjust_formats(field_list)
    if rc is not True:
        print(rc, file=sys.stderr)
        return 1
    fmtr.field_list = field_list
    nas_field_format.set_field_vars(opts_W)
    # Decide if will be filtering based on execution host
    host_patt = check_W_str('host')
    if host_patt is None:
        host_patt = check_W_str('hosts')
    if host_patt:
        host_re = re.compile(r'\b(' + host_patt.replace(',', '|') + r')\b',
                             re.I)
    else:
        host_re = None
    conf.host_re = host_re
    if host_re:
        # If we are filtering by host, make sure we ask for resv_nodes
        attr_list.add('resv_nodes')
    if args.F or args.f:
        attr_list = None
    # Collect the info
    resvs = get_resv_info(args.resvids, attr_list)
    if resvs is None:
        sys.exit(1)
    userexit_post_statresv(globals(), locals())
    if args.f:
        display_f(args, resvs, "Resv ID", "ResvID")
    # Display it
    elif args.B:
        display_brief(resvs, fmtr)
    elif args.F:
        display_full(resvs, fmtr)
    else:
        display_standard(resvs, fmtr)
    return 0


def display_brief(resvs, fmtr):
    '''Display brief output.

    That is, display only the reservation IDs
    Args:
        resvs = list of info for reservatons
        fmtr = <ignored>
    '''
    for resv in resvs:
        resvid = resv['id']
        print("Resv ID:", resvid)


def display_full(resvs, fmtr):
    '''Display full output.

    Display everything about the reservations, one line per item.

    Args:
        resvs = list of info for reservations
        fmtr = field formatter object
    '''
    from nas_field_format import decode_epoch_full, decode_resv_state_full
    for resv in resvs:
        resvid = resv['id']
        print("Resv ID:", resvid)
        for key in sorted(resv):
            tag = key
            value = resv[key]
            # Skip a few boring items
            if key in ['id', 'resv_nodes', 'interactive']:
                continue
            elif key == 'reserve_state':
                value = decode_resv_state_full(value)
            elif key in ['reserve_start', 'reserve_end', 'ctime', 'mtime']:
                value = decode_epoch_full(value)
            print(key, '=', value)
        print()


def display_standard(resvs, fmtr):
    '''Output info in standard format

    For each reservation, generate a list of display values for each
    selected field. Collect those lists into a list and pass it to
    layout for display.
    Args:
        resvs = list of info for reservations
        fmtr = field formatter object
    '''
    c = layout.Config()
    for fld in fmtr.field_list:
        title = fld['title']
        if not title:
            title = fld['name']
        c.add_field(title, ident=fld['name'], **fld['format'])
    rows = list()
    for resv in resvs:
        row = list()
        for f in fmtr.field_list:
            func = getattr(nas_field_format, f['func'])
            row.append(func(f, resv))
        rows.append(row)
    if rows:
        show_hdr = '-h' not in conf.opts_W
        res = layout.layout(c, rows, show_hdr=show_hdr)
        print('\n'.join([x.rstrip() for x in res]))


def gen_field_list():
    '''Generate list of known fields

    Returns: list of field_info dicts for known fields
    The dict have these key/value pairs
        name: the name of the field
        format: dict suitable for passing to layout.add_field()
        func: name of function to calculate display value
        sources: reservation attributes whose values are needed by func
    '''
    fl = []
    fl.append(gen_field('name', 'Name', None, 'fmt_resv_name', 'Reserve_Name'))
    fl.append(gen_field('queue', 'Queue', None, 'fmt_by_name', 'queue'))
    fl.append(gen_field('user', 'User', None, 'fmt_user', 'Reserve_Owner'))
    fl.append(gen_field('state', 'State', None, 'fmt_resv_state',
                        'reserve_state'))
    fl.append(gen_field('states', 'State', None, 'fmt_resv_states',
                        'reserve_state reserve_substate'))
    fl.append(gen_field('start', 'Start', {'hj': 'r'}, 'fmt_date',
                        'reserve_start'))
    fl.append(gen_field('duration', 'Duration', {'hj': 'r'}, 'fmt_duration',
                        'reserve_duration'))
    fl.append(gen_field('end', 'End', None, 'fmt_date', 'reserve_end'))
    fl.append(gen_field('groups', 'Groups', None, 'fmt_by_attr',
                        'Authorized_Groups'))
    fl.append(gen_field('users', 'Users', None, 'fmt_by_attr',
                        'Authorized_Users'))
    fl.append(gen_field('nodes', 'Nodes', None, 'fmt_nodes', 'resv_nodes'))
    fl.append(gen_field('reserved', 'Reserved', None, 'fmt_by_attr',
                        'resv_nodes'))
    fl.append(gen_field('select', 'Select', None, 'fmt_by_name',
                        'Resource_List'))
    fl.append(gen_field('sselect', 'SSelect', None, 'fmt_by_attr',
                        'schedselect'))
    fl.append(gen_field('nodect', 'Nodect', {'hj': 'r'}, 'fmt_by_name',
                        'Resource_List'))
    fl.append(gen_field('model', 'Model', None, 'fmt_model', 'schedselect'))
    fl.append(gen_field('id', 'Resv ID', None, 'fmt_id', None))
    return fl


def get_resv_info(resvids, attr_list):
    '''Ask server for info about reservations

    Args:
        resvids = list of reservation IDs
        attr_list = list of interesting attributes.
    Returns:
        List of PBS batchstatus results
    '''
    if attr_list is not None:
        attr_list = (','.join(attr_list)).split(',')
        atl = list_to_attrl(list(attr_list))
    else:
        atl = None
    bs = list()
    conn = None
    if resvids is None or len(resvids) == 0:
        bs = file_to_stat(pbs_conf.pbs_server_name, 'resvs', attr_list)
        if bs is None:
            # Ask for all reservations
            conn = ifl.pbs_connect(None)
            if conn < 0:
                print("Cannot connect to PBS server: %s" %
                      os.strerror(ifl.get_pbs_errno()),
                      file=sys.stderr)
                return None
            bs = ifl.pbs_statresv(conn, None, atl, None)
    else:
        cur_server = None
        for resid in resvids:
            (seq_no, server) = get_server(resid)
            if seq_no is None and server is None:
                print("Invalid request id:", resid, file=sys.stderr)
                continue
            if server is None:
                server = pbs_conf.pbs_server_name
            bs1 = file_to_stat(server, 'resvs', attr_list)
            if bs1 is None:
                if server != cur_server:
                    if conn is not None:
                        ifl.pbs_disconnect(conn)
                        cur_server = None
                    conn = ifl.pbs_connect(server)
                    if conn < 0:
                        print("Cannot connect to PBS server %s: %s" %
                              (server, os.strerror(ifl.get_pbs_errno())))
                        break
                    cur_server = server
                bs1 = ifl.pbs_statresv(conn, seq_no, atl, None)
            if conf.verbose > 1:
                print(bs1)
            bs.extend(bs1)
    if conn is not None and conn >= 0:
        ifl.pbs_disconnect(conn)
    # If filtering by host, keep only interesting reservations
    if conf.host_re:
        newbs = []
        for resv in bs:
            resv_nodes = resv.get('resv_nodes')
            if not resv_nodes:
                continue
            if not conf.host_re.search(resv_nodes):
                continue
            newbs.append(resv)
        bs = newbs
    if conf.verbose > 1:
        print(bs)
    return bs


def check_W_str(name, default=''):
    namee = name + '='
    # Last match decides, so search backward
    for idx in range(len(conf.opts_W) - 1, -1, -1):
        wopt = conf.opts_W[idx]
        # Option by itself is default
        if wopt == name:
            return default
        # Examine name=value
        if not wopt.startswith(namee):
            continue
        val = wopt[len(namee):]
        return val
    return default


if __name__ == '__main__':
    sys.exit(main())

# vi:ts=4:sw=4:expandtab
