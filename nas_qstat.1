.TH NAS_QSTAT 1 "2020-05-04" Local "OpenPBS contributions"
.SH NAME
.B nas_qstat
- display status of PBS jobs, queues, or servers

.SH SYNOPSIS
.B Displaying Job Status
.RS
.B nas_qstat
[-i|-r] [-G|-M] [-J] [-n] [-s] [-t] [-x] [-W option] [[<job ID> | <destination>] ...]
.sp
.RE
.B Displaying Queue Status
.RS
.B nas_qstat
-Q [<destination> ...]
.sp
.RE
.B Displaying Server Status
.RS
.B nas_qstat
-B [<server> ...]
.sp
.RE
.B Version Information
.br
.RS
.B nas_qstat
--version
.sp
.RE
.SH DESCRIPTION
The
.B nas_qstat
command displays the status of jobs, queues, or servers, writing
the status information to standard output.
.SH OPTIONS
.TP
.B -a
Precede job information section with information about the server and
compute resources.

.TP
.B -B
Display status for PBS server hosts listed on command line. If none specified,
display information for the local host's default PBS server.

.TP
.B -G
Display memory sizes in gigabytes, rather than megabytes.

.TP
.B -H
Selects only finished jobs or those moved to other PBS servers.

.TP
.B -J
Display status for job arrays, but not subjobs.

.TP
.B -M
Display memory sizes in 8 byte megawords.

.TP
.B -Q
Display status for PBS queues. Destination operands are queue names at the
default server. Queues at others servers can be specified as
.IR "queue_name@server" .

.TP
.BI -W " display_option"
Options affecting how statuses are displayed.
See
.B "\-W OPTIONS"
section.

.TP
.B -i
Selects only queued, held, or waiting jobs.

.TP
.B -n
List the nodes where a job is running on a separate line following the job
information.

.TP
.B -r
Selects only running, suspended, or exiting jobs.

.TP
.B -s
Include system comment about the job on a separate line following the job
information.

.TP
.B -t
Display status for jobs, job_arrays, and subjobs.

.TP
.BI -u " user"
Select only jobs from specified user.

.TP
.B -x
Include finished and moved jobs (if the server is configured to maintain
job history).
.SS -W OPTIONS
The
.B -W
argument accepts many options that change what information is displayed or
how it is displayed. Multiple options are specified using multiple
.B -W
instances.
Some of the options need quoting to protect them from the shell.

.TP
.BI fmt_ name = formatting_options
Apply specified formatting options to the field given by
.IR name .
Formatting options accumulate and the last one specified wins.
.sp
In the displayed output, each field occupies a column. Each column has three
parts. First is one or more rows giving the title for the column
(e.g., "User" or "Jobname").
Next is a row of dashes to separate the titles from the field values.
Last are the rows of values for the field.
The formatting options for the headers, the dashes, and the values can
be controlled individually.
.sp
Options are specified as a space-separated list of
.BI name: value
pairs. See
.BR EXAMPLES .
The option names are:
.RS

.TP
.B df:
(dash\ fill) The string to repeat to form the horizontal separator between
the title lines and the data lines (default '-').

.TP
.B dj:
(dash\ just) Justification to apply to separator fill. See
.B hj:
for values.

.TP
.B ds:
(dash\ separator) Character between this field and the next (default
.BR hs ).

.TP
.B dt:
(dash\ trunc) String to indicate truncation of field (default
.BR ht ).

.TP
.B hf:
(header\ fill) String to fill title text to width of column (default space).

.TP
.B hj:
(header\ just) Justification to apply to title text. Values are
 'l': left justified;
 'r': right justified;
 'c': centered;
 'lr': left justified first line, remaining right justified;
 'e': end justified, equivalent to left justified if text fits within
column width. If text needs to be truncated, the trucation will happen
in the middle and the ends will be retained.

.TP
.B hs:
(header\ separator) Character between this field and the next (default
space, unless
.B maxw:
== 0).

.TP
.B ht:
(header\ trunc) String to indication truncation of the field (default nothing).

.TP
.B maxw:
(max\ width) Maximum width of column.
If not set, nas_qstat picks a width that accommodates all values.

.TP
.B minw:
(min\ width) Minimum width of column.

.TP
.B rf:
(row\ fill) String to fill data values to width of column (default
.BR hf ).

.TP
.B rj:
(row\ just) Justification to apply to data values (default
.BR hj ).
See
.B hj for values.

.TP
.B rs:
(row\ separator) Character between this field and the next (default
.BR hs ).

.TP
.B rt:
(row\ trunc) String to indicate truncation of field (default
.BR ht ).

.TP
.B title:
String to use as title for column.
.RE
.sp
Ex:
.B "-W fmt_jobname='maxw:20 hj:e ht:...'"
.sp
.RS
Notice that the settings for the dash and data rows default to the
settings for the header rows.
.RE
.sp

.TP
.BI host[s]= host_pattern
Restrict reporting of jobs to those running on nodes whose names match the
regular expression given by
.IR host_pattern .
As a convenience, any commas (,) in the pattern are replaced by the
regular expression alternative indicator (|). Thus, "hosts=mercury,jupiter"
matches either of the the hosts "mercury" or "jupiter".
The pattern will often need to be quoted to protect it from the shell.
.br
This option also selects which hosts will be reported in the nodes section
of
.B
-a
output.

.TP
.B model
At NAS, include the node model type in the
.I info
field of the
.B -a
node status display.

.TP
.BI node_bin_size= mmm
When the number of nodes selected for the beginning section of the
.B -a
output exceeds the value of
.BR node_bin_total ,
then collect similar nodes into groups and output a summary line for
each group of more than
.I mmm
similar nodes.
Otherwise, individually display the nodes in the group.
Nodes are "similar" when their info fields are identical.

.TP
.BI node_bin_total= nnn
When generating the node information at the beginning of the
.B -a
output,
if there are
.I nnn
or more nodes to display, then summarize similar nodes, rather than listing
them individually.
See also
.BR node_bin_size .

.TP
.B node_comments
Include node comments in node "info" field of the
.B -a
output.

.TP
.B node_detail
Replace total CPU count column in
.B -a
output with columns giving used and free CPUs and used and free memory for the nodes.

.TP
.BR noheader " or " -h
Suppresses column identifier and dash lines from status output.
Useful when output is passed to another program for analysis.

.TP
.BI o= [+-]field_list
Change which fields are displayed.
The
.I
field_list
is a comma-separated list of field names to display.
If the list is prefixed with '-', the given fields are removed from the display list.
If the list is prefixed with '+', the given fields are appended to the display list.
Specifying
.RB ' o=? '
requests nas_qstat to list the currently known fields and then exit.
The known fields can be changed by the site administrator or by the user.
The current list is acct, aoe, cnt, cpct, cput, ctime, eff, elapwallt, eligtime, eligwait, estend, eststart, exitstatus, group, jobid, jobname, lifetime, maxwallt, memory, minwallt, mission, model, nds, place, pmem, pri, qtime, queue, rank0, reqid, reqmem, remwallt, reqdwallt, runs, s, sessid, seqno, ss, stime, tsk, user, vmem.
.SH EXIT STATUS
Normally returns 0. Returns 1 on errors (e.g., nonexistent queue or jobid).

.SH ENVIRONMENT

.TP
.B HOME
Used to locate user's
.I .qstat_sysexits
file.
If not set, the password database is consulted for the user's home directory.

.TP
.B PBS_DEFAULT
Specifies default PBS server host. If not set, the host's PBS configuration
file is consulted (usually
.IR /etc/pbs.conf ).

.SH FILES
.TP
PBS_EXEC/lib/site/qstat_sysexits
Administrator provided python code to provide default values and
sysexits. See
.B SYSEXITS
section.
.TP
PBS_EXEC/bin/pbs_python
Python interpreter that runs
.BR nas_qstat .
.TP
$HOME/.qstat_sysexits
User supplied python code to provide default values and sysexits.
See
.B SYSEXITS
section.

.SH SYSEXITS
.B nas_qstat
invokes three administrator- or user- supplied routines at specific
points during its execution.
The routines are passed two arguments, g and l, where
.B g
is the global
dictionary and
.B l
is the local dictionary at the point of call.
.sp
This is a two-step process. Early in
.B nas_qstat
execution, after command-line arguments have been parsed, but before any
.B -W
options have been evaluated,
.B nas_qstat
searches in two places for snippets of python code to execute via python's
.I compile
and
.I exec
methods.
The first place searched is
.IR PBS_EXEC/lib/site/ ,
where the file
.I qstat_sysexits
is read, if it exists.
The second search location is
.IR $HOME/.qstat_sysexits ,
which is also read, if it exists.
.sp
The contents of these files are catenated and passed to
.I compile
and
.IR exec .
While these snippets of code can perform some actions themselves, their
primary purpose is to override/extend routines that will be called later
during
.BR nas_qstat 's
execution.
The routines overriden or defined comprise the second step and are
described next.
Interesting variables directly available from the snippets are:
.RS
.TP
.B args.B
True if
.B -B
specified on command line.
.TP
.B args.Q
True if
.B -Q
specified on command line.
.TP
.B default_fields
A list with the names of default fields. This list can be
edited directly, although it is preferred to make changes using the
.B sysexit_post_opt
routine.
.TP
.B stack_sysexit(old, new)
Routine that creates a new routine that calls the
.B old
sysexit routine and
then the
.B new
one.
The primary use is in the user's sysexit script to call the site's
version of that sysexit and then call the user's version.
.RE

.TP
.B "sysexit_post_opts(g, l)"
Called immediately after the snippets are loaded and before
.B -W
options are examined to adjust formatting. This is where you might change
the default field list and formats.
Variables of interest are:
.RS
.TP
.B l('default_W')
An empty list to which -W options can be added.
These will appear as if added to the command line before any other
.B -W
options.
See the example below.
.RE

.TP
.B "sysexit_add_fields(g, l)"
Called after the layout formatter has been created, but before the formatting
options from
.B -W
options have been examined.
Its purpose is to allow the site/user to define a new field and how to
format that field.
Surprisingly perhaps, even though
.B sysexit_add_fields
is called after
.BR sysexit_post_opts ,
the latter can include fmt_xxx options that affect how the new field(s)
are displayed.

.TP
.B "sysexit_set_server(g, l)"
When displaying job status, this is called after information about the
server has been fetched, but before anything is displayed.
If multiple servers are specified among the command line destinations,
.B sysexit_set_server
is called for each server.
When called, interesting variables are:
.RS
.TP
.B l['current_server']
Has the name of the server, usually as a FQDN.
.TP
.B l['in_server_header']
Set True when preparing the host list display at the beginning of
.B -a
output. Unset when preparing job display.
.TP
.B l['cfg']
The current configuration object for laying out the display.
Using this, you can directly change formatting options for specific
fields.
.TP
.B cfg.change_fieldspec(t, ...)
A class function allowing direct access to the object that holds
formatting specifications for the field with the title
.BR t .
Note that the field is referenced by its field title, not by
the name used on -W fmt_xxx options. E.g., field 'cpus' has title 'CPUs'.
If you change the title via
.BR -W fmt_xxx=title:new_title ,
then you must use "new_title" in the call to
.BR change_fieldspec .
.PP
The intended purpose of this sysexit is to enable or suppress fields from
the output.
Note that this cannot be done by one of the earlier sysexits because
the actual server used is not known when those sysexits run.
(On the other hand, if the site has only one server, then it is more efficient
to add or remove fields using
.IR sysexit_post_opt .)
Further note that this routine is called too late to add or remove fields.
Instead, you can suppress undesired fields or unsuppress fields that
are normally not displayed.
Fields are suppressed by setting their
.B suppress
field specification to
.BR False .
.sp
.RE
See the EXAMPLE SYSEXITS section for typical uses.
.SH EXAMPLES
.sp
Show running jobs.
.sp
.EX
\fBnas_qstat -r\fP
                                                 Req'd    Elap
JobID      User     Queue Jobname        TSK Nds wallt S wallt Eff
---------- -------- ----- -------------- --- --- ----- - ----- ---
38.server2 dtalcott workq longish_name_5   2   2 00:33 R 00:20 50%
.EE
.sp
Same, but include remaining walltime.
.sp
.EX
\fBnas_qstat -r -W o=+remwallt\fP
                                                 Req'd    Elap       Rem
JobID      User     Queue Jobname        TSK Nds wallt S wallt Eff wallt
---------- -------- ----- -------------- --- --- ----- - ----- --- -----
38.server2 dtalcott workq longish_name_5   2   2 00:33 R 00:24 50% 00:09
.EE
.sp
Show running jobs, but limit the Jobname field to 10 characters. Long
jobnames are truncated to a single "*" in the middle, keeping some
characters from each end.
.sp
.EX
\fBnas_qstat -r -W fmt_jobname='maxw:10 hj:e ht:*'\fP
                                             Req'd    Elap
JobID      User     Queue Jobname    TSK Nds wallt S wallt Eff
---------- -------- ----- ---------- --- --- ----- - ----- ---
39.server2 dtalcott workq long*ame_5   2   2 00:33 R 00:26 49%
.EE
.sp
Show waiting jobs along with summary of node status.
.sp
.EX
\fBnas_qstat -a -i\fP
server2:     Fri May  7 16:10:01 2021
 Server reports 4 jobs total (T:0 Q:2 H:1 W:0 R:1 E:0 B:0)

  Host  CPUs Tasks Jobs Info
  ----- ---- ----- ---- ------
  node4    1     0    0
  node5    0     0    0
  node6    0     0    0
  node7    0     0    0
  node3    2     2    1 in-use
                                          Req'd     Elap
JobID      User     Queue Jobname TSK Nds wallt S  wallt Eff
---------- -------- ----- ------- --- --- ----- - ------ ---
21.server2 dtalcott playq STDIN     1   1 00:33 Q 365:35  --
22.server2 dtalcott playq STDIN     1   1 00:33 Q 265:26  --
8.server2  dtalcott playq STDIN     1   1 00:03 H  00:00  --
.EE
.sp
Same, but summarize similar nodes (by setting the summarizing threshold low).
.sp
.EX
\fBnas_qstat -a -i -W node_bin_total=2\fP
server2:     Fri May  7 16:14:32 2021
 Server reports 4 jobs total (T:0 Q:2 H:1 W:0 R:1 E:0 B:0)

  Host     CPUs Tasks Jobs Info
  -------- ---- ----- ---- ------
   4 hosts    1     0    0
  node3       2     2    1 in-use
                                          Req'd     Elap
JobID      User     Queue Jobname TSK Nds wallt S  wallt Eff
---------- -------- ----- ------- --- --- ----- - ------ ---
21.server2 dtalcott playq STDIN     1   1 00:33 Q 365:40  --
22.server2 dtalcott playq STDIN     1   1 00:33 Q 265:30  --
8.server2  dtalcott playq STDIN     1   1 00:03 H  00:00  --
.EE
.SH EXAMPLE SYSEXITS
This example shows a
.I qstat_sysexits
file that a site might install in
.I PBS_EXEC/lib/site
to enable NAS options,
and make
.B node_detail
and
.B model
.B -W
options default.
The example also displays GPU information only for jobs on servers in
a particular list ('pbspl4' in the example). For other servers, the column
is suppressed.
.sp
.EX
# Enable NAS-specific features
globals()['gNAS'] = True

# Possibly do different things based on whether we are statusing hosts,
# queues, or jobs
if args.B:
    pass
elif args.Q:
    pass
else:
    # We add ngpus to default field list, if not already there
    if 'gpus' not in default_fields:
        try:
            t = default_fields.index('cpus')
        except:
            t = len(default_fields) - 1
        default_fields.insert(t+1, 'gpus')

    # Set up routine to set default -W values
    def site_post_opts(g, l):
        l['default_W'].extend(['node_detail', 'model'])

    sysexit_post_opts = stack_sysexit(sysexit_post_opts, site_post_opts)

    # Set up routine to tweak outputs based on server
    def site_set_server(g, l):
        server_name = l['current_server'].split('.')[0]
        cfg = l['cfg']
        svr_hdr = l.get('in_server_header', False)
        if svr_hdr:
            if not server_name in ['pbspl4']:
                # Disable all GPU fields in -a node output
                cfg.change_fieldspec('GPUs', suppress=True)
                cfg.change_fieldspec(['GPUs', 'used'], suppress=True)
                cfg.change_fieldspec(['', 'free'], suppress=True)
        else:
            # Enable/disable job GPU column
            if server_name in ['pbspl4']:
                cfg.change_fieldspec('GPUs', suppress=False)
            else:
                cfg.change_fieldspec('GPUs', suppress=True)

    sysexit_set_server = stack_sysexit(sysexit_set_server, site_set_server)

.EE
.PP
The next example shows what a user might put in their
.I $HOME/.qstat_sysexits
file.
This example limits the jobname field to 20 characters and uses "..."
to indicate parts of the name have been elided.
It also turns on the
.B "-W human"
option.
The
.B set_server
portion of the code limits the node info of the
.B -a
output to 40 characters.

.EX
if args.B:
    pass
elif args.Q:
    pass
else:
    def my_post(g, l):
        # Keep jobname field reasonable
        l['default_W'].extend(['fmt_jobname=maxw:20 hj:e rt:...'])
        # Use human readable durations
        l['default_W'].extend(['human'])
    sysexit_post_opts = stack_sysexit(sysexit_post_opts, my_post)

    def my_server(g, l):
        svr_hdr = l.get('in_server_header', False)
        if svr_hdr:
            cfg = l['cfg']
            cfg.change_fieldspec('Node Info', maxw=40)

    sysexit_set_server = stack_sysexit(sysexit_set_server, my_server)

.EE
.sp
